// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Người dùng và xác thực
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  permissions   String    @default("")
  roleId        String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull)
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]
  transactions  Transaction[]
  vps           VPS[]
  droplets      Droplet[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Role và quyền hạn
model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.Text
  permissions String    @default("")
  maxServers  Int       @default(5)
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  roleServerTemplates RoleServerTemplate[]

  @@map("roles")
}

// Server regions (các khu vực triển khai máy chủ)
model ServerRegion {
  id          String    @id @default(cuid())
  name        String    @unique
  location    String
  isActive    Boolean   @default(true)
  isAdminOnly Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Không có quan hệ trực tiếp với ServerTemplate
  // do đó không định nghĩa relation ở đây

  @@map("server_regions")
}

// Server templates (các cấu hình máy chủ tiêu chuẩn)
model ServerTemplate {
  id                String    @id @default(cuid())
  name              String
  // Cấu hình phiên bản cũ
  cpu               Int?
  ram               Int?
  disk              Int?
  price             Float?
  
  // Cấu hình phiên bản mới
  cpuCount          Int?
  memoryGB          Int?
  storageGB         Int?
  description       String?   @db.Text
  
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // ServerTemplate không có trường regionId và không có mối quan hệ trực tiếp với ServerRegion
  // Vì vậy chúng ta không định nghĩa relation với ServerRegion
  
  roleServerTemplates RoleServerTemplate[]

  @@map("server_templates")
}

// Bảng liên kết giữa Role và ServerTemplate
model RoleServerTemplate {
  id               String        @id @default(cuid())
  roleId           String
  serverTemplateId String
  maxServers       Int           @default(5)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  role             Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  serverTemplate   ServerTemplate @relation(fields: [serverTemplateId], references: [id], onDelete: Cascade)

  @@unique([roleId, serverTemplateId])
  @@map("role_server_templates")
}

// Lưu lịch sử hoạt động
model Activity {
  id        String   @id @default(cuid())
  action    String
  details   Json?
  userId    String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activities")
}

// Lưu token kết nối với Digital Ocean
model DigitalOceanToken {
  id        String   @id @default(cuid())
  token     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("digital_ocean_tokens")
}

// Lưu thông tin giao dịch
model Transaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  description String?
  status      String
  paymentId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

// VPS (Máy chủ ảo)
model VPS {
  id          String   @id @default(cuid())
  name        String
  userId      String
  ip          String?
  status      String   @default("pending")
  region      String?
  cpu         Int?
  ram         Int?
  disk        Int?
  price       Float?
  renewalDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vps")
}

// Thông báo Telegram
model TelegramNotification {
  id        String   @id @default(cuid())
  chatId    String
  message   String   @db.Text
  sent      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("telegram_notifications")
}

// Digital Ocean Droplet
model Droplet {
  id          String   @id @default(cuid())
  doId        Int      @unique
  name        String
  userId      String
  status      String
  ip          String?
  region      String?
  size        String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firewalls   FirewallDroplet[]

  @@map("droplets")
}

// Firewall
model Firewall {
  id            String   @id @default(cuid())
  doId          String   @unique
  name          String
  status        String
  inboundRules  Json?    // Mảng các quy tắc đầu vào
  outboundRules Json?    // Mảng các quy tắc đầu ra
  tags          Json?    // Các tag được gán cho firewall
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  droplets      FirewallDroplet[]

  @@map("firewalls")
}

// Bảng liên kết Firewall và Droplet
model FirewallDroplet {
  id          String   @id @default(cuid())
  firewallId  String
  dropletId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  firewall    Firewall @relation(fields: [firewallId], references: [id], onDelete: Cascade)
  droplet     Droplet  @relation(fields: [dropletId], references: [id], onDelete: Cascade)

  @@unique([firewallId, dropletId])
  @@map("FirewallDroplet")
}
