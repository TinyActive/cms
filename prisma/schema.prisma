generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  password              String
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  roleId                String
  balance               Float                  @default(0)
  accounts              Account[]
  activities            Activity[]
  droplets              Droplet[]
  sessions              Session[]
  telegramNotifications TelegramNotification[]
  transactions          Transaction[]
  role                  Role                   @relation(fields: [roleId], references: [id])
  vps                   VPS[]

  @@index([roleId], map: "User_roleId_fkey")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id              String               @id @default(cuid())
  name            String               @unique
  description     String?
  permissions     String               @db.Text
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  maxServers      Int                  @default(3)
  serverTemplates RoleServerTemplate[]
  users           User[]
}

model Droplet {
  id             String            @id @default(cuid())
  digitalOceanId String?
  name           String
  status         String
  ip             String?
  region         String
  size           String
  image          String
  cpu            Int               @default(0)
  memory         Int               @default(0)
  disk           Int               @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  userId         String
  activities     Activity[]
  user           User              @relation(fields: [userId], references: [id])
  firewalls      FirewallDroplet[]

  @@index([userId], map: "Droplet_userId_fkey")
}

model Firewall {
  id             String            @id @default(cuid())
  digitalOceanId String?
  name           String
  status         String
  inboundRules   Json
  outboundRules  Json
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  activities     Activity[]
  droplets       FirewallDroplet[]
}

model FirewallDroplet {
  id         String   @id @default(cuid())
  firewallId String
  dropletId  String
  createdAt  DateTime @default(now())
  droplet    Droplet  @relation(fields: [dropletId], references: [id], onDelete: Cascade)
  firewall   Firewall @relation(fields: [firewallId], references: [id], onDelete: Cascade)

  @@unique([firewallId, dropletId])
  @@index([dropletId], map: "FirewallDroplet_dropletId_fkey")
}

model Activity {
  id         String    @id @default(cuid())
  action     String
  details    Json?
  createdAt  DateTime  @default(now())
  userId     String
  dropletId  String?
  firewallId String?
  droplet    Droplet?  @relation(fields: [dropletId], references: [id])
  firewall   Firewall? @relation(fields: [firewallId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@index([dropletId], map: "Activity_dropletId_fkey")
  @@index([firewallId], map: "Activity_firewallId_fkey")
  @@index([userId], map: "Activity_userId_fkey")
}

model DigitalOceanToken {
  id        String   @id @default(cuid())
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String   @id @default(cuid())
  amount    Float
  type      String
  status    String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Transaction_userId_fkey")
}

model VPS {
  id             String   @id @default(cuid())
  digitalOceanId String
  name           String
  status         String
  ip             String?
  region         String
  size           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "VPS_userId_fkey")
}

model TelegramNotification {
  id     String @id @default(cuid())
  chatId String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId], map: "TelegramNotification_userId_fkey")
}

model ServerTemplate {
  id              String               @id @default(cuid())
  name            String
  cpu             Int
  ram             Int
  disk            Int
  price           Float
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  rolePermissions RoleServerTemplate[]
}

model RoleServerTemplate {
  id               String         @id @default(cuid())
  roleId           String
  serverTemplateId String
  maxServers       Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  role             Role           @relation(fields: [roleId], references: [id], onDelete: Cascade)
  serverTemplate   ServerTemplate @relation(fields: [serverTemplateId], references: [id], onDelete: Cascade)

  @@unique([roleId, serverTemplateId])
  @@index([serverTemplateId], map: "RoleServerTemplate_serverTemplateId_fkey")
}

model ServerRegion {
  id          String   @id @default(cuid())
  name        String
  location    String
  isActive    Boolean  @default(true)
  isAdminOnly Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
